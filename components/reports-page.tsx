"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { DatePickerWithRange } from "@/components/date-picker-with-range"
import { WorkerDistributionChart } from "@/components/worker-distribution-chart"
import { IncidentTrendChart } from "@/components/incident-trend-chart"
import { Download, FileText, BarChart3, Users, AlertTriangle, TrendingUp, Clock } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import type { DateRange } from "react-day-picker"

interface ReportData {
  totalWorkers: number
  activeZones: number
  totalAlerts: number
  criticalIncidents: number
  safetyScore: number
  averageResponseTime: number
  workerDistribution: { zone: string; count: number; status: string }[]
  incidentTrends: { date: string; incidents: number; severity: string }[]
  riskMetrics: { category: string; value: number; trend: number }[]
}

export function ReportsPage() {
  const [dateRange, setDateRange] = useState<DateRange | undefined>({
    from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago
    to: new Date(),
  })
  const [selectedZone, setSelectedZone] = useState<string>("all")
  const [reportType, setReportType] = useState<string>("safety")
  const [isGenerating, setIsGenerating] = useState(false)
  const { toast } = useToast()

  // Mock report data - in real app, this would come from API
  const reportData: ReportData = {
    totalWorkers: 120,
    activeZones: 5,
    totalAlerts: 47,
    criticalIncidents: 3,
    safetyScore: 87,
    averageResponseTime: 4.2,
    workerDistribution: [
      { zone: "Zone A", count: 25, status: "safe" },
      { zone: "Zone B", count: 18, status: "caution" },
      { zone: "Zone C", count: 32, status: "safe" },
      { zone: "Zone D", count: 15, status: "danger" },
      { zone: "Zone E", count: 30, status: "safe" },
    ],
    incidentTrends: [
      { date: "2024-01-01", incidents: 2, severity: "low" },
      { date: "2024-01-02", incidents: 1, severity: "medium" },
      { date: "2024-01-03", incidents: 0, severity: "low" },
      { date: "2024-01-04", incidents: 3, severity: "high" },
      { date: "2024-01-05", incidents: 1, severity: "low" },
      { date: "2024-01-06", incidents: 2, severity: "medium" },
      { date: "2024-01-07", incidents: 0, severity: "low" },
    ],
    riskMetrics: [
      { category: "Environmental", value: 65, trend: -5 },
      { category: "Geological", value: 78, trend: 12 },
      { category: "Operational", value: 45, trend: -8 },
      { category: "Equipment", value: 82, trend: 3 },
    ],
  }

  const generatePDFReport = async () => {
    setIsGenerating(true)

    // Simulate PDF generation
    await new Promise((resolve) => setTimeout(resolve, 2000))

    // Create a simple PDF-like content
    const reportContent = `
MINE SAFETY MONITORING SYSTEM
Safety Report - ${reportType.toUpperCase()}

Generated: ${new Date().toLocaleString()}
Period: ${dateRange?.from?.toLocaleDateString()} - ${dateRange?.to?.toLocaleDateString()}
Zone: ${selectedZone === "all" ? "All Zones" : selectedZone}

EXECUTIVE SUMMARY
================
Total Workers: ${reportData.totalWorkers}
Active Zones: ${reportData.activeZones}
Total Alerts: ${reportData.totalAlerts}
Critical Incidents: ${reportData.criticalIncidents}
Safety Score: ${reportData.safetyScore}%
Average Response Time: ${reportData.averageResponseTime} minutes

WORKER DISTRIBUTION
==================
${reportData.workerDistribution.map((item) => `${item.zone}: ${item.count} workers (${item.status})`).join("\n")}

RISK METRICS
============
${reportData.riskMetrics
  .map((item) => `${item.category}: ${item.value}% (${item.trend > 0 ? "+" : ""}${item.trend}%)`)
  .join("\n")}

RECOMMENDATIONS
===============
1. Increase monitoring in high-risk zones
2. Implement additional safety protocols
3. Regular equipment maintenance checks
4. Enhanced worker training programs

---
Report generated by Mine Safety Monitoring System
Powered by SIH 2025 | AI + IoT
    `

    // Create and download the file
    const blob = new Blob([reportContent], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `mine-safety-report-${reportType}-${new Date().toISOString().split("T")[0]}.txt`
    a.click()
    URL.revokeObjectURL(url)

    setIsGenerating(false)
    toast({
      title: "Report Generated",
      description: `${reportType.toUpperCase()} report has been downloaded`,
    })
  }

  const exportCSVData = (dataType: string) => {
    let csvData: string[][] = []
    let filename = ""

    switch (dataType) {
      case "workers":
        csvData = [
          ["Zone", "Worker Count", "Status"],
          ...reportData.workerDistribution.map((item) => [item.zone, item.count.toString(), item.status]),
        ]
        filename = "worker-distribution"
        break
      case "incidents":
        csvData = [
          ["Date", "Incidents", "Severity"],
          ...reportData.incidentTrends.map((item) => [item.date, item.incidents.toString(), item.severity]),
        ]
        filename = "incident-trends"
        break
      case "risks":
        csvData = [
          ["Category", "Value (%)", "Trend (%)"],
          ...reportData.riskMetrics.map((item) => [item.category, item.value.toString(), item.trend.toString()]),
        ]
        filename = "risk-metrics"
        break
      default:
        return
    }

    const csv = csvData.map((row) => row.join(",")).join("\n")
    const blob = new Blob([csv], { type: "text/csv" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${filename}-${new Date().toISOString().split("T")[0]}.csv`
    a.click()
    URL.revokeObjectURL(url)

    toast({
      title: "Data Exported",
      description: `${dataType} data has been exported to CSV`,
    })
  }

  const getSafetyScoreColor = (score: number) => {
    if (score >= 90) return "text-green-500"
    if (score >= 70) return "text-yellow-500"
    return "text-red-500"
  }

  const getTrendIcon = (trend: number) => {
    return trend > 0 ? "↗" : trend < 0 ? "↘" : "→"
  }

  const getTrendColor = (trend: number) => {
    return trend > 0 ? "text-red-500" : trend < 0 ? "text-green-500" : "text-gray-500"
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">Reports & Analytics</h1>
          <p className="text-muted-foreground">Generate comprehensive safety reports and export data</p>
        </div>
        <div className="flex items-center gap-4">
          <Select value={reportType} onValueChange={setReportType}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Report type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="safety">Safety Report</SelectItem>
              <SelectItem value="incident">Incident Report</SelectItem>
              <SelectItem value="worker">Worker Report</SelectItem>
              <SelectItem value="risk">Risk Assessment</SelectItem>
            </SelectContent>
          </Select>
          <Select value={selectedZone} onValueChange={setSelectedZone}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Select zone" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Zones</SelectItem>
              <SelectItem value="Zone A">Zone A</SelectItem>
              <SelectItem value="Zone B">Zone B</SelectItem>
              <SelectItem value="Zone C">Zone C</SelectItem>
              <SelectItem value="Zone D">Zone D</SelectItem>
              <SelectItem value="Zone E">Zone E</SelectItem>
            </SelectContent>
          </Select>
          <DatePickerWithRange date={dateRange} setDate={setDateRange} />
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Safety Score</p>
                <p className={`text-3xl font-bold ${getSafetyScoreColor(reportData.safetyScore)}`}>
                  {reportData.safetyScore}%
                </p>
              </div>
              <BarChart3 className="h-8 w-8 text-muted-foreground" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Total Workers</p>
                <p className="text-3xl font-bold">{reportData.totalWorkers}</p>
              </div>
              <Users className="h-8 w-8 text-muted-foreground" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Critical Incidents</p>
                <p className="text-3xl font-bold text-red-500">{reportData.criticalIncidents}</p>
              </div>
              <AlertTriangle className="h-8 w-8 text-red-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Avg Response Time</p>
                <p className="text-3xl font-bold">{reportData.averageResponseTime}m</p>
              </div>
              <Clock className="h-8 w-8 text-muted-foreground" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Charts and Analytics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Worker Distribution by Zone</CardTitle>
            <CardDescription>Current worker allocation and safety status</CardDescription>
          </CardHeader>
          <CardContent>
            <WorkerDistributionChart data={reportData.workerDistribution} />
            <div className="flex justify-end mt-4">
              <Button onClick={() => exportCSVData("workers")} variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Export CSV
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Incident Trends</CardTitle>
            <CardDescription>Daily incident reports over selected period</CardDescription>
          </CardHeader>
          <CardContent>
            <IncidentTrendChart data={reportData.incidentTrends} />
            <div className="flex justify-end mt-4">
              <Button onClick={() => exportCSVData("incidents")} variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Export CSV
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Risk Metrics */}
      <Card>
        <CardHeader>
          <CardTitle>Risk Assessment Metrics</CardTitle>
          <CardDescription>Current risk levels across different categories</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {reportData.riskMetrics.map((metric) => (
              <div key={metric.category} className="p-4 border rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-semibold">{metric.category}</h4>
                  <span className={`text-sm ${getTrendColor(metric.trend)}`}>
                    {getTrendIcon(metric.trend)} {Math.abs(metric.trend)}%
                  </span>
                </div>
                <div className="text-2xl font-bold mb-2">{metric.value}%</div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div
                    className={`h-2 rounded-full ${
                      metric.value >= 80
                        ? "bg-red-500"
                        : metric.value >= 60
                          ? "bg-yellow-500"
                          : metric.value >= 40
                            ? "bg-blue-500"
                            : "bg-green-500"
                    }`}
                    style={{ width: `${metric.value}%` }}
                  ></div>
                </div>
              </div>
            ))}
          </div>
          <div className="flex justify-end mt-4">
            <Button onClick={() => exportCSVData("risks")} variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export CSV
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Report Generation */}
      <Card>
        <CardHeader>
          <CardTitle>Generate Reports</CardTitle>
          <CardDescription>Create comprehensive reports for management and compliance</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Button
              onClick={generatePDFReport}
              disabled={isGenerating}
              className="h-20 flex flex-col items-center justify-center gap-2"
            >
              <FileText className="h-6 w-6" />
              <span>{isGenerating ? "Generating..." : "Safety Report"}</span>
            </Button>

            <Button
              onClick={generatePDFReport}
              disabled={isGenerating}
              variant="outline"
              className="h-20 flex flex-col items-center justify-center gap-2 bg-transparent"
            >
              <AlertTriangle className="h-6 w-6" />
              <span>Incident Report</span>
            </Button>

            <Button
              onClick={generatePDFReport}
              disabled={isGenerating}
              variant="outline"
              className="h-20 flex flex-col items-center justify-center gap-2 bg-transparent"
            >
              <Users className="h-6 w-6" />
              <span>Worker Report</span>
            </Button>

            <Button
              onClick={generatePDFReport}
              disabled={isGenerating}
              variant="outline"
              className="h-20 flex flex-col items-center justify-center gap-2 bg-transparent"
            >
              <TrendingUp className="h-6 w-6" />
              <span>Risk Assessment</span>
            </Button>
          </div>

          <div className="mt-6 p-4 bg-muted/50 rounded-lg">
            <h4 className="font-semibold mb-2">Report Contents</h4>
            <ul className="text-sm text-muted-foreground space-y-1">
              <li>• Executive summary with key metrics</li>
              <li>• Worker distribution and safety status</li>
              <li>• Incident analysis and trends</li>
              <li>• Risk assessment by category</li>
              <li>• AI-generated recommendations</li>
              <li>• Compliance and regulatory information</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
